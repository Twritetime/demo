package rules;
import com.example.demo.model.entity.User;

// 此规则将下级（直接和间接）的最高级别向上传播。
// 它会同时考虑子节点自身的级别及其所有下级的最高级别。
rule "向上传播下级的最高级别"
    salience 5
    dialect "mvel"
    when
        // 当存在一个有上级的子用户时
        $child : User(parentId != null)
        // 找到该子用户的上级
        $parent : User(id == $child.parentId)
        // 计算潜在的新的最高级别（取子节点自身级别和其下级最高级别中的较大值）
        $newMax : Number(intValue > $parent.getSubordinatesMaxLevel()) from
            Math.max($child.getLevel(), $child.getSubordinatesMaxLevel())
    then
        // 如果计算出的新最高级别更高，则更新父级的“下级最高级别”
        modify($parent) { setSubordinatesMaxLevel($newMax.intValue()) };
end

// 此规则为用户计算并分配铜币。
// 它在所有级别信息在层级中传播完毕后触发。
rule "计算并分配铜币"
    salience 1
    dialect "mvel"
    when
        // 用户的级别必须高于其所有下级的最高级别，才有资格获得铜币。
        // 用户必须有下级（即 subordinatesMaxLevel > 0）。
        // 同时检查 benefit > 0 作为通用防护条件。
        $user : User(benefit > 0, level > subordinatesMaxLevel, subordinatesMaxLevel > 0)
    then
        // 级别差决定了铜币的数量。
        int levelGap = $user.getLevel() - $user.getSubordinatesMaxLevel();
        int coin = levelGap * 10;
        // 更新用户的铜币数量。
        modify($user) { setCopperCoin($user.getCopperCoin() + coin) };
end
